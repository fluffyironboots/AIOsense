uart:
  id: uart_bus
  tx_pin: "${uart_tx_pin}"
  rx_pin: "${uart_rx_pin}"
  baud_rate: 115200

binary_sensor:
  - platform: gpio
    name: "mmWave"
    id: motion_mmwave
    device_class: occupancy
    - if:
        condition:
          #with pullup logic is reversed
          lambda: !lambda |-
            return "${$sen0395_io_pin}" != "GPIO0";
        then:
          filters:
            - invert:
    pin:
      number: "${sen0395_io_pin}"
      - if:
          condition:
            #shouldnt pull gpio0 down since it has a internal pullup
            lambda: !lambda |-
              return "${$sen0395_io_pin}" != "GPIO0";
          then:
            mode: INPUT_PULLDOWN

# reverse logic of sen0395 gpio pin so it's default high to meet requirement of gpio0 being high at boot
# (should work without this but safe is safe)
- if:
  condition:
    lambda: !lambda |-
            return "${$sen0395_io_pin}" == "GPIO0";
        then:
          esphome:
            on_boot:
              priority: 600
              then:
                - switch.turn_off: mmwave_sensor
                - delay: 1s
                - uart.write: "setGpioMode 2 0"
                - delay: 1s
                - uart.write: "saveConfig"
                - delay: 3s
                - switch.turn_on: mmwave_sensor
              else:
                - switch.turn_off: mmwave_sensor
                - delay: 1s
                - uart.write: "setGpioMode 2 1"
                - delay: 1s
                - uart.write: "saveConfig"
                - delay: 3s
                - switch.turn_on: mmwave_sensor

switch:
  - platform: template
    name: "mmWave Sensor"
    id: "mmwave_sensor"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    assumed_state: true
    turn_on_action:
      - uart.write: "sensorStart"
      - delay: 1s
    turn_off_action:
      - uart.write: "sensorStop"
      - delay: 1s

  - platform: template
    name: "mmWave LED"
    id: "mmwave_led"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    assumed_state: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

number:
  - platform: template
    name: "mmWave Distance"
    id: mmwave_distance
    entity_category: config
    min_value: 0
    max_value: 800
    initial_value: 315
    optimistic: true
    step: 50
    restore_value: true
    unit_of_measurement: cm
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda int cm = (int)ceil(x / 15.0);
          std::string cms = "detRangeCfg -1 0 " + to_string(cm);
          return std::vector<unsigned char>(cms.begin(), cms.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "mmWave Off Latency"
    id: mmwave_latency
    entity_category: config
    min_value: 0
    max_value: 65000
    initial_value: 12500
    optimistic: true
    step: 25
    restore_value: true
    unit_of_measurement: ms
    mode: box
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda int ms = (int)ceil(x / 25.0);
          std::string mss = "outputLatency -1 0 " + to_string(ms);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "mmWave Sensitivity"
    id: mmwave_sensitivity
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 7
    optimistic: true
    step: 1
    restore_value: true
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write:
          !lambda std::string mss = "setSensitivity " + to_string((int)x);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

button:
  - platform: template
    name: "mmWave Factory Reset"
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
